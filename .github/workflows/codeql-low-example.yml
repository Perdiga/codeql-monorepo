name: "CodeQL"

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  schedule:
    - cron: "39 18 * * 6"
  workflow_dispatch:

jobs:
  changes:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
    outputs:
      projects: ${{ steps.build-languages.outputs.result }}
    steps:
      - uses: actions/checkout@v3
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            advanced-security-csharp-low:
              - 'advanced-security-csharp-low/**'           
      - uses: actions/github-script@v6
        id: build-languages
        env:
          filter: ${{ toJson(steps.filter.outputs) }}
        with:
          script: |
            const filter = JSON.parse(process.env.filter)
            const changes = JSON.parse(filter.changes)
            const config = {
              go: [],
              python: [],
              csharp: [
                'advanced-security-csharp-low'
              ],
              java: [],
              javascript: [],
              ruby: [],
              swift: [],
              'c-cpp': [],
            }

            const projects = changes.map((change) => {
              return {
                languages: Object.entries(config).filter(([language, paths]) => paths.includes(change)).map(([language]) => language),
                path: change
              }
            });
            return {
              projects,
              length: changes.length,
              languages: projects.reduce((acc, project) => {
                project.languages.forEach((language) => {
                  if (!acc.includes(language)) {
                    acc.push(language)
                  }
                })
                return acc
              }, [])
            }

  analyze:
    name: Analyze
    needs: changes 
    if: ${{ fromJson(needs.changes.outputs.projects).length > 0 }}
    runs-on: ${{ (matrix.project.languages[0] == 'swift' && 'macos-latest') || 'ubuntu-latest' }}
    timeout-minutes: ${{ (matrix.project.languages[0] == 'swift' && 120) || 360 }}
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        project: ${{ fromJson(needs.changes.outputs.projects).projects }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          sparse-checkout: ${{ matrix.project.path }}

      # Initializes the CodeQL tools for scanning.
      # Some times the none autobuild will trigger a low quality analysis alert
      # So you can use the autobuild mode to avoid this alert
      # If the autobuild mode fails, you will need to use the manual build mode
      # https://docs.github.com/en/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/codeql-code-scanning-for-compiled-languages#accuracy-of-no-build-analysis-for-c
      
      # This simulate the none autobuild mode with the warning alert
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ join(matrix.project.languages, ',') }}
          buildmode: none
          config: |
            paths:
              - '${{ matrix.project.path }}'
      
      # Comment the block above and uncomment the block below to use the autobuild mode
      # This should fix the low quality analysis alert
      # - name: Initialize CodeQL
      #   uses: github/codeql-action/init@v3
      #   with:
      #     languages: ${{ join(matrix.project.languages, ',') }}
      #     buildmode: autobuild
      #     config: |
      #       paths:
      #         - '${{ matrix.project.path }}'

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{ matrix.project.languages[0] }}"
